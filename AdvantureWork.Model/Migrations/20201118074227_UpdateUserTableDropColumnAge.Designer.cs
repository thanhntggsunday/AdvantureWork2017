// <auto-generated />
using System;
using AdvantureWork.Model.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdvantureWork.Model.Migrations
{
    [DbContext(typeof(AdventureWorksDW2017Context))]
    [Migration("20201118074227_UpdateUserTableDropColumnAge")]
    partial class UpdateUserTableDropColumnAge
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AdvantureWork.Model.Entities.AdventureWorksDwbuildVersion", b =>
                {
                    b.Property<string>("Dbversion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DBVersion");

                    b.Property<DateTime?>("VersionDate")
                        .HasColumnType("datetime");

                    b.ToTable("AdventureWorksDWBuildVersion");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.AppAction", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_ActionKey");

                    b.ToTable("AppActions");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.AppFunction", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("IconCss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_FunctionKey");

                    b.ToTable("AppFunctions");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.AppFunction_Action", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FunctionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionsID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID")
                        .HasName("PK_Function_ActionKey");

                    b.HasIndex("ActionId");

                    b.HasIndex("FunctionsID");

                    b.ToTable("AppFunction_Action");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.AppRole_Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid?>("AppRolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Function_ActionID")
                        .HasColumnType("int");

                    b.Property<string>("RoleID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID")
                        .HasName("PK_Role_PermissionKey");

                    b.HasIndex("AppRolesId");

                    b.HasIndex("Function_ActionID");

                    b.ToTable("AppRole_Permission");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DatabaseLog", b =>
                {
                    b.Property<int>("DatabaseLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DatabaseLogID")
                        .UseIdentityColumn();

                    b.Property<string>("DatabaseUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Object")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Schema")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Tsql")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TSQL");

                    b.Property<string>("XmlEvent")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.HasKey("DatabaseLogId")
                        .HasName("PK_DatabaseLog_DatabaseLogID")
                        .IsClustered(false);

                    b.ToTable("DatabaseLog");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimAccount", b =>
                {
                    b.Property<int>("AccountKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AccountCodeAlternateKey")
                        .HasColumnType("int");

                    b.Property<string>("AccountDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomMemberOptions")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CustomMembers")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Operator")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentAccountCodeAlternateKey")
                        .HasColumnType("int");

                    b.Property<int?>("ParentAccountKey")
                        .HasColumnType("int");

                    b.Property<string>("ValueType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountKey");

                    b.HasIndex("ParentAccountKey");

                    b.ToTable("DimAccount");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimCurrency", b =>
                {
                    b.Property<int>("CurrencyKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CurrencyAlternateKey")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CurrencyKey")
                        .HasName("PK_DimCurrency_CurrencyKey");

                    b.HasIndex(new[] { "CurrencyAlternateKey" }, "AK_DimCurrency_CurrencyAlternateKey")
                        .IsUnique();

                    b.ToTable("DimCurrency");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimCustomer", b =>
                {
                    b.Property<int>("CustomerKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CommuteDistance")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CustomerAlternateKey")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("DateFirstPurchase")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EnglishEducation")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("EnglishOccupation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrenchEducation")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FrenchOccupation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("GeographyKey")
                        .HasColumnType("int");

                    b.Property<string>("HouseOwnerFlag")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("NameStyle")
                        .HasColumnType("bit");

                    b.Property<byte?>("NumberCarsOwned")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NumberChildrenAtHome")
                        .HasColumnType("tinyint");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SpanishEducation")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SpanishOccupation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<byte?>("TotalChildren")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("YearlyIncome")
                        .HasColumnType("money");

                    b.HasKey("CustomerKey")
                        .HasName("PK_DimCustomer_CustomerKey");

                    b.HasIndex("GeographyKey");

                    b.HasIndex(new[] { "CustomerAlternateKey" }, "IX_DimCustomer_CustomerAlternateKey")
                        .IsUnique();

                    b.ToTable("DimCustomer");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimDate", b =>
                {
                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<byte>("CalendarQuarter")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CalendarSemester")
                        .HasColumnType("tinyint");

                    b.Property<short>("CalendarYear")
                        .HasColumnType("smallint");

                    b.Property<byte>("DayNumberOfMonth")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DayNumberOfWeek")
                        .HasColumnType("tinyint");

                    b.Property<short>("DayNumberOfYear")
                        .HasColumnType("smallint");

                    b.Property<string>("EnglishDayNameOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EnglishMonthName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("FiscalQuarter")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FiscalSemester")
                        .HasColumnType("tinyint");

                    b.Property<short>("FiscalYear")
                        .HasColumnType("smallint");

                    b.Property<string>("FrenchDayNameOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FrenchMonthName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("FullDateAlternateKey")
                        .HasColumnType("date");

                    b.Property<byte>("MonthNumberOfYear")
                        .HasColumnType("tinyint");

                    b.Property<string>("SpanishDayNameOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SpanishMonthName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("WeekNumberOfYear")
                        .HasColumnType("tinyint");

                    b.HasKey("DateKey")
                        .HasName("PK_DimDate_DateKey");

                    b.HasIndex(new[] { "FullDateAlternateKey" }, "AK_DimDate_FullDateAlternateKey")
                        .IsUnique();

                    b.ToTable("DimDate");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimDepartmentGroup", b =>
                {
                    b.Property<int>("DepartmentGroupKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DepartmentGroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentDepartmentGroupKey")
                        .HasColumnType("int");

                    b.HasKey("DepartmentGroupKey");

                    b.HasIndex("ParentDepartmentGroupKey");

                    b.ToTable("DimDepartmentGroup");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimEmployee", b =>
                {
                    b.Property<int>("EmployeeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("BaseRate")
                        .HasColumnType("money");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<bool>("CurrentFlag")
                        .HasColumnType("bit");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("EmployeeNationalIdalternateKey")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("EmployeeNationalIDAlternateKey");

                    b.Property<byte[]>("EmployeePhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("LoginID");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NameStyle")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentEmployeeKey")
                        .HasColumnType("int");

                    b.Property<string>("ParentEmployeeNationalIdalternateKey")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("ParentEmployeeNationalIDAlternateKey");

                    b.Property<byte?>("PayFrequency")
                        .HasColumnType("tinyint");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool?>("SalariedFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("SalesPersonFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("SalesTerritoryKey")
                        .HasColumnType("int");

                    b.Property<short?>("SickLeaveHours")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("VacationHours")
                        .HasColumnType("smallint");

                    b.HasKey("EmployeeKey")
                        .HasName("PK_DimEmployee_EmployeeKey");

                    b.HasIndex("ParentEmployeeKey");

                    b.HasIndex("SalesTerritoryKey");

                    b.ToTable("DimEmployee");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimGeography", b =>
                {
                    b.Property<int>("GeographyKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CountryRegionCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("EnglishCountryRegionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrenchCountryRegionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IpAddressLocator")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("SalesTerritoryKey")
                        .HasColumnType("int");

                    b.Property<string>("SpanishCountryRegionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StateProvinceCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("StateProvinceName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GeographyKey")
                        .HasName("PK_DimGeography_GeographyKey");

                    b.HasIndex("SalesTerritoryKey");

                    b.ToTable("DimGeography");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimOrganization", b =>
                {
                    b.Property<int>("OrganizationKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CurrencyKey")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentOrganizationKey")
                        .HasColumnType("int");

                    b.Property<string>("PercentageOfOwnership")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("OrganizationKey");

                    b.HasIndex("CurrencyKey");

                    b.HasIndex("ParentOrganizationKey");

                    b.ToTable("DimOrganization");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimProduct", b =>
                {
                    b.Property<int>("ProductKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ArabicDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ChineseDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Class")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("DaysToManufacture")
                        .HasColumnType("int");

                    b.Property<decimal?>("DealerPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EnglishDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("EnglishProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("FinishedGoodsFlag")
                        .HasColumnType("bit");

                    b.Property<string>("FrenchDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("FrenchProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GermanDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("HebrewDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("JapaneseDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<byte[]>("LargePhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal?>("ListPrice")
                        .HasColumnType("money");

                    b.Property<string>("ModelName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductAlternateKey")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ProductLine")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<int?>("ProductSubcategoryKey")
                        .HasColumnType("int");

                    b.Property<short?>("ReorderPoint")
                        .HasColumnType("smallint");

                    b.Property<short?>("SafetyStockLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SizeRange")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SizeUnitMeasureCode")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("SpanishProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("StandardCost")
                        .HasColumnType("money");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Style")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("ThaiDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TurkishDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.Property<string>("WeightUnitMeasureCode")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.HasKey("ProductKey")
                        .HasName("PK_DimProduct_ProductKey");

                    b.HasIndex("ProductSubcategoryKey");

                    b.HasIndex(new[] { "ProductAlternateKey", "StartDate" }, "AK_DimProduct_ProductAlternateKey_StartDate")
                        .IsUnique()
                        .HasFilter("[ProductAlternateKey] IS NOT NULL AND [StartDate] IS NOT NULL");

                    b.ToTable("DimProduct");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EnglishProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrenchProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductCategoryAlternateKey")
                        .HasColumnType("int");

                    b.Property<string>("SpanishProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductCategoryKey")
                        .HasName("PK_DimProductCategory_ProductCategoryKey");

                    b.HasIndex(new[] { "ProductCategoryAlternateKey" }, "AK_DimProductCategory_ProductCategoryAlternateKey")
                        .IsUnique()
                        .HasFilter("[ProductCategoryAlternateKey] IS NOT NULL");

                    b.ToTable("DimProductCategory");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimProductSubcategory", b =>
                {
                    b.Property<int>("ProductSubcategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EnglishProductSubcategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrenchProductSubcategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductCategoryKey")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSubcategoryAlternateKey")
                        .HasColumnType("int");

                    b.Property<string>("SpanishProductSubcategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductSubcategoryKey")
                        .HasName("PK_DimProductSubcategory_ProductSubcategoryKey");

                    b.HasIndex("ProductCategoryKey");

                    b.HasIndex(new[] { "ProductSubcategoryAlternateKey" }, "AK_DimProductSubcategory_ProductSubcategoryAlternateKey")
                        .IsUnique()
                        .HasFilter("[ProductSubcategoryAlternateKey] IS NOT NULL");

                    b.ToTable("DimProductSubcategory");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimPromotion", b =>
                {
                    b.Property<int>("PromotionKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double?>("DiscountPct")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EnglishPromotionCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EnglishPromotionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EnglishPromotionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrenchPromotionCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrenchPromotionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FrenchPromotionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MaxQty")
                        .HasColumnType("int");

                    b.Property<int?>("MinQty")
                        .HasColumnType("int");

                    b.Property<int?>("PromotionAlternateKey")
                        .HasColumnType("int");

                    b.Property<string>("SpanishPromotionCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SpanishPromotionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SpanishPromotionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("PromotionKey")
                        .HasName("PK_DimPromotion_PromotionKey");

                    b.HasIndex(new[] { "PromotionAlternateKey" }, "AK_DimPromotion_PromotionAlternateKey")
                        .IsUnique()
                        .HasFilter("[PromotionAlternateKey] IS NOT NULL");

                    b.ToTable("DimPromotion");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimReseller", b =>
                {
                    b.Property<int>("ResellerKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal?>("AnnualRevenue")
                        .HasColumnType("money");

                    b.Property<decimal?>("AnnualSales")
                        .HasColumnType("money");

                    b.Property<string>("BankName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("FirstOrderYear")
                        .HasColumnType("int");

                    b.Property<int?>("GeographyKey")
                        .HasColumnType("int");

                    b.Property<int?>("LastOrderYear")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinPaymentAmount")
                        .HasColumnType("money");

                    b.Property<byte?>("MinPaymentType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("NumberEmployees")
                        .HasColumnType("int");

                    b.Property<string>("OrderFrequency")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<byte?>("OrderMonth")
                        .HasColumnType("tinyint");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ProductLine")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResellerAlternateKey")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ResellerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("YearOpened")
                        .HasColumnType("int");

                    b.HasKey("ResellerKey")
                        .HasName("PK_DimReseller_ResellerKey");

                    b.HasIndex("GeographyKey");

                    b.HasIndex(new[] { "ResellerAlternateKey" }, "AK_DimReseller_ResellerAlternateKey")
                        .IsUnique()
                        .HasFilter("[ResellerAlternateKey] IS NOT NULL");

                    b.ToTable("DimReseller");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimSalesReason", b =>
                {
                    b.Property<int>("SalesReasonKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("SalesReasonAlternateKey")
                        .HasColumnType("int");

                    b.Property<string>("SalesReasonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SalesReasonReasonType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SalesReasonKey")
                        .HasName("PK_DimSalesReason_SalesReasonKey");

                    b.ToTable("DimSalesReason");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimSalesTerritory", b =>
                {
                    b.Property<int>("SalesTerritoryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("SalesTerritoryAlternateKey")
                        .HasColumnType("int");

                    b.Property<string>("SalesTerritoryCountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SalesTerritoryGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("SalesTerritoryImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SalesTerritoryRegion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SalesTerritoryKey")
                        .HasName("PK_DimSalesTerritory_SalesTerritoryKey");

                    b.HasIndex(new[] { "SalesTerritoryAlternateKey" }, "AK_DimSalesTerritory_SalesTerritoryAlternateKey")
                        .IsUnique()
                        .HasFilter("[SalesTerritoryAlternateKey] IS NOT NULL");

                    b.ToTable("DimSalesTerritory");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimScenario", b =>
                {
                    b.Property<int>("ScenarioKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ScenarioName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ScenarioKey");

                    b.ToTable("DimScenario");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactAdditionalInternationalProductDescription", b =>
                {
                    b.Property<int>("ProductKey")
                        .HasColumnType("int");

                    b.Property<string>("CultureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductKey", "CultureName")
                        .HasName("PK_FactAdditionalInternationalProductDescription_ProductKey_CultureName");

                    b.ToTable("FactAdditionalInternationalProductDescription");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactCallCenter", b =>
                {
                    b.Property<int>("FactCallCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FactCallCenterID")
                        .UseIdentityColumn();

                    b.Property<int>("AutomaticResponses")
                        .HasColumnType("int");

                    b.Property<short>("AverageTimePerIssue")
                        .HasColumnType("smallint");

                    b.Property<int>("Calls")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<short>("IssuesRaised")
                        .HasColumnType("smallint");

                    b.Property<short>("LevelOneOperators")
                        .HasColumnType("smallint");

                    b.Property<short>("LevelTwoOperators")
                        .HasColumnType("smallint");

                    b.Property<int>("Orders")
                        .HasColumnType("int");

                    b.Property<double>("ServiceGrade")
                        .HasColumnType("float");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short>("TotalOperators")
                        .HasColumnType("smallint");

                    b.Property<string>("WageType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("FactCallCenterId");

                    b.HasIndex(new[] { "DateKey", "Shift" }, "AK_FactCallCenter_DateKey_Shift")
                        .IsUnique();

                    b.ToTable("FactCallCenter");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactCurrencyRate", b =>
                {
                    b.Property<int>("CurrencyKey")
                        .HasColumnType("int");

                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<double>("AverageRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<double>("EndOfDayRate")
                        .HasColumnType("float");

                    b.HasKey("CurrencyKey", "DateKey")
                        .HasName("PK_FactCurrencyRate_CurrencyKey_DateKey");

                    b.HasIndex("DateKey");

                    b.ToTable("FactCurrencyRate");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactFinance", b =>
                {
                    b.Property<int>("AccountKey")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentGroupKey")
                        .HasColumnType("int");

                    b.Property<int>("FinanceKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OrganizationKey")
                        .HasColumnType("int");

                    b.Property<int>("ScenarioKey")
                        .HasColumnType("int");

                    b.HasIndex("AccountKey");

                    b.HasIndex("DateKey");

                    b.HasIndex("DepartmentGroupKey");

                    b.HasIndex("OrganizationKey");

                    b.HasIndex("ScenarioKey");

                    b.ToTable("FactFinance");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactInternetSale", b =>
                {
                    b.Property<string>("SalesOrderNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("SalesOrderLineNumber")
                        .HasColumnType("tinyint");

                    b.Property<string>("CarrierTrackingNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("CurrencyKey")
                        .HasColumnType("int");

                    b.Property<int>("CustomerKey")
                        .HasColumnType("int");

                    b.Property<string>("CustomerPonumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("CustomerPONumber");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DueDateKey")
                        .HasColumnType("int");

                    b.Property<decimal>("ExtendedAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("Freight")
                        .HasColumnType("money");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderDateKey")
                        .HasColumnType("int");

                    b.Property<short>("OrderQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductKey")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductStandardCost")
                        .HasColumnType("money");

                    b.Property<int>("PromotionKey")
                        .HasColumnType("int");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("SalesAmount")
                        .HasColumnType("money");

                    b.Property<int>("SalesTerritoryKey")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShipDateKey")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmt")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalProductCost")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<double>("UnitPriceDiscountPct")
                        .HasColumnType("float");

                    b.HasKey("SalesOrderNumber", "SalesOrderLineNumber")
                        .HasName("PK_FactInternetSales_SalesOrderNumber_SalesOrderLineNumber");

                    b.HasIndex("CurrencyKey");

                    b.HasIndex("CustomerKey");

                    b.HasIndex("DueDateKey");

                    b.HasIndex("OrderDateKey");

                    b.HasIndex("ProductKey");

                    b.HasIndex("PromotionKey");

                    b.HasIndex("SalesTerritoryKey");

                    b.HasIndex("ShipDateKey");

                    b.ToTable("FactInternetSales");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactInternetSalesReason", b =>
                {
                    b.Property<string>("SalesOrderNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("SalesOrderLineNumber")
                        .HasColumnType("tinyint");

                    b.Property<int>("SalesReasonKey")
                        .HasColumnType("int");

                    b.HasKey("SalesOrderNumber", "SalesOrderLineNumber", "SalesReasonKey")
                        .HasName("PK_FactInternetSalesReason_SalesOrderNumber_SalesOrderLineNumber_SalesReasonKey");

                    b.HasIndex("SalesReasonKey");

                    b.ToTable("FactInternetSalesReason");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactProductInventory", b =>
                {
                    b.Property<int>("ProductKey")
                        .HasColumnType("int");

                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("date");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("money");

                    b.Property<int>("UnitsBalance")
                        .HasColumnType("int");

                    b.Property<int>("UnitsIn")
                        .HasColumnType("int");

                    b.Property<int>("UnitsOut")
                        .HasColumnType("int");

                    b.HasKey("ProductKey", "DateKey");

                    b.HasIndex("DateKey");

                    b.ToTable("FactProductInventory");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactResellerSale", b =>
                {
                    b.Property<string>("SalesOrderNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("SalesOrderLineNumber")
                        .HasColumnType("tinyint");

                    b.Property<string>("CarrierTrackingNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("CurrencyKey")
                        .HasColumnType("int");

                    b.Property<string>("CustomerPonumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("CustomerPONumber");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DueDateKey")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeKey")
                        .HasColumnType("int");

                    b.Property<decimal?>("ExtendedAmount")
                        .HasColumnType("money");

                    b.Property<decimal?>("Freight")
                        .HasColumnType("money");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderDateKey")
                        .HasColumnType("int");

                    b.Property<short?>("OrderQuantity")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductKey")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProductStandardCost")
                        .HasColumnType("money");

                    b.Property<int>("PromotionKey")
                        .HasColumnType("int");

                    b.Property<int>("ResellerKey")
                        .HasColumnType("int");

                    b.Property<byte?>("RevisionNumber")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("SalesAmount")
                        .HasColumnType("money");

                    b.Property<int>("SalesTerritoryKey")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShipDateKey")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxAmt")
                        .HasColumnType("money");

                    b.Property<decimal?>("TotalProductCost")
                        .HasColumnType("money");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<double?>("UnitPriceDiscountPct")
                        .HasColumnType("float");

                    b.HasKey("SalesOrderNumber", "SalesOrderLineNumber")
                        .HasName("PK_FactResellerSales_SalesOrderNumber_SalesOrderLineNumber");

                    b.HasIndex("CurrencyKey");

                    b.HasIndex("DueDateKey");

                    b.HasIndex("EmployeeKey");

                    b.HasIndex("OrderDateKey");

                    b.HasIndex("ProductKey");

                    b.HasIndex("PromotionKey");

                    b.HasIndex("ResellerKey");

                    b.HasIndex("SalesTerritoryKey");

                    b.HasIndex("ShipDateKey");

                    b.ToTable("FactResellerSales");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactSalesQuotum", b =>
                {
                    b.Property<int>("SalesQuotaKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte>("CalendarQuarter")
                        .HasColumnType("tinyint");

                    b.Property<short>("CalendarYear")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeKey")
                        .HasColumnType("int");

                    b.Property<decimal>("SalesAmountQuota")
                        .HasColumnType("money");

                    b.HasKey("SalesQuotaKey")
                        .HasName("PK_FactSalesQuota_SalesQuotaKey");

                    b.HasIndex("DateKey");

                    b.HasIndex("EmployeeKey");

                    b.ToTable("FactSalesQuota");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactSurveyResponse", b =>
                {
                    b.Property<int>("SurveyResponseKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerKey")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<string>("EnglishProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EnglishProductSubcategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductCategoryKey")
                        .HasColumnType("int");

                    b.Property<int>("ProductSubcategoryKey")
                        .HasColumnType("int");

                    b.HasKey("SurveyResponseKey")
                        .HasName("PK_FactSurveyResponse_SurveyResponseKey");

                    b.HasIndex("CustomerKey");

                    b.HasIndex("DateKey");

                    b.ToTable("FactSurveyResponse");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.NewFactCurrencyRate", b =>
                {
                    b.Property<float?>("AverageRate")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CurrencyDate")
                        .HasColumnType("date");

                    b.Property<string>("CurrencyId")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("CurrencyID");

                    b.Property<int?>("CurrencyKey")
                        .HasColumnType("int");

                    b.Property<int?>("DateKey")
                        .HasColumnType("int");

                    b.Property<float?>("EndOfDayRate")
                        .HasColumnType("real");

                    b.ToTable("NewFactCurrencyRate");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.ProspectiveBuyer", b =>
                {
                    b.Property<int>("ProspectiveBuyerKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Education")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("HouseOwnerFlag")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte?>("NumberCarsOwned")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NumberChildrenAtHome")
                        .HasColumnType("tinyint");

                    b.Property<string>("Occupation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProspectAlternateKey")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Salutation")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("StateProvinceCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<byte?>("TotalChildren")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Unknown")
                        .HasColumnType("int");

                    b.Property<decimal?>("YearlyIncome")
                        .HasColumnType("money");

                    b.HasKey("ProspectiveBuyerKey")
                        .HasName("PK_ProspectiveBuyer_ProspectiveBuyerKey");

                    b.ToTable("ProspectiveBuyer");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.VAssocSeqLineItem", b =>
                {
                    b.Property<byte>("LineNumber")
                        .HasColumnType("tinyint");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToView("vAssocSeqLineItems");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.VAssocSeqOrder", b =>
                {
                    b.Property<int>("CustomerKey")
                        .HasColumnType("int");

                    b.Property<string>("IncomeGroup")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("vAssocSeqOrders");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.VDmprep", b =>
                {
                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<short>("CalendarYear")
                        .HasColumnType("smallint");

                    b.Property<int>("CustomerKey")
                        .HasColumnType("int");

                    b.Property<string>("EnglishProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("FiscalYear")
                        .HasColumnType("smallint");

                    b.Property<string>("IncomeGroup")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<byte>("LineNumber")
                        .HasColumnType("tinyint");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Month")
                        .HasColumnType("tinyint");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("vDMPrep");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.VTargetMail", b =>
                {
                    b.Property<string>("AddressLine1")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BikeBuyer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CommuteDistance")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CustomerAlternateKey")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("CustomerKey")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateFirstPurchase")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EnglishEducation")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("EnglishOccupation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrenchEducation")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FrenchOccupation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("GeographyKey")
                        .HasColumnType("int");

                    b.Property<string>("HouseOwnerFlag")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("NameStyle")
                        .HasColumnType("bit");

                    b.Property<byte?>("NumberCarsOwned")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("NumberChildrenAtHome")
                        .HasColumnType("tinyint");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SpanishEducation")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SpanishOccupation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<byte?>("TotalChildren")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("YearlyIncome")
                        .HasColumnType("money");

                    b.ToView("vTargetMail");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.VTimeSeries", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<short>("CalendarYear")
                        .HasColumnType("smallint");

                    b.Property<string>("ModelRegion")
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<byte>("Month")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReportingDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TimeIndex")
                        .HasColumnType("int");

                    b.ToView("vTimeSeries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.AppFunction_Action", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.AppAction", "Action")
                        .WithMany("Function_Action")
                        .HasForeignKey("ActionId");

                    b.HasOne("AdvantureWork.Model.Entities.AppFunction", "Functions")
                        .WithMany("Function_Action")
                        .HasForeignKey("FunctionsID");

                    b.Navigation("Action");

                    b.Navigation("Functions");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.AppRole_Permission", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.AppRole", "AppRoles")
                        .WithMany()
                        .HasForeignKey("AppRolesId");

                    b.HasOne("AdvantureWork.Model.Entities.AppFunction_Action", "Function_Action")
                        .WithMany("Role_Permission")
                        .HasForeignKey("Function_ActionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRoles");

                    b.Navigation("Function_Action");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimAccount", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimAccount", "ParentAccountKeyNavigation")
                        .WithMany("InverseParentAccountKeyNavigation")
                        .HasForeignKey("ParentAccountKey")
                        .HasConstraintName("FK_DimAccount_DimAccount");

                    b.Navigation("ParentAccountKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimCustomer", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimGeography", "GeographyKeyNavigation")
                        .WithMany("DimCustomers")
                        .HasForeignKey("GeographyKey")
                        .HasConstraintName("FK_DimCustomer_DimGeography");

                    b.Navigation("GeographyKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimDepartmentGroup", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimDepartmentGroup", "ParentDepartmentGroupKeyNavigation")
                        .WithMany("InverseParentDepartmentGroupKeyNavigation")
                        .HasForeignKey("ParentDepartmentGroupKey")
                        .HasConstraintName("FK_DimDepartmentGroup_DimDepartmentGroup");

                    b.Navigation("ParentDepartmentGroupKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimEmployee", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimEmployee", "ParentEmployeeKeyNavigation")
                        .WithMany("InverseParentEmployeeKeyNavigation")
                        .HasForeignKey("ParentEmployeeKey")
                        .HasConstraintName("FK_DimEmployee_DimEmployee");

                    b.HasOne("AdvantureWork.Model.Entities.DimSalesTerritory", "SalesTerritoryKeyNavigation")
                        .WithMany("DimEmployees")
                        .HasForeignKey("SalesTerritoryKey")
                        .HasConstraintName("FK_DimEmployee_DimSalesTerritory");

                    b.Navigation("ParentEmployeeKeyNavigation");

                    b.Navigation("SalesTerritoryKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimGeography", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimSalesTerritory", "SalesTerritoryKeyNavigation")
                        .WithMany("DimGeographies")
                        .HasForeignKey("SalesTerritoryKey")
                        .HasConstraintName("FK_DimGeography_DimSalesTerritory");

                    b.Navigation("SalesTerritoryKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimOrganization", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimCurrency", "CurrencyKeyNavigation")
                        .WithMany("DimOrganizations")
                        .HasForeignKey("CurrencyKey")
                        .HasConstraintName("FK_DimOrganization_DimCurrency");

                    b.HasOne("AdvantureWork.Model.Entities.DimOrganization", "ParentOrganizationKeyNavigation")
                        .WithMany("InverseParentOrganizationKeyNavigation")
                        .HasForeignKey("ParentOrganizationKey")
                        .HasConstraintName("FK_DimOrganization_DimOrganization");

                    b.Navigation("CurrencyKeyNavigation");

                    b.Navigation("ParentOrganizationKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimProduct", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimProductSubcategory", "ProductSubcategoryKeyNavigation")
                        .WithMany("DimProducts")
                        .HasForeignKey("ProductSubcategoryKey")
                        .HasConstraintName("FK_DimProduct_DimProductSubcategory");

                    b.Navigation("ProductSubcategoryKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimProductSubcategory", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimProductCategory", "ProductCategoryKeyNavigation")
                        .WithMany("DimProductSubcategories")
                        .HasForeignKey("ProductCategoryKey")
                        .HasConstraintName("FK_DimProductSubcategory_DimProductCategory");

                    b.Navigation("ProductCategoryKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimReseller", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimGeography", "GeographyKeyNavigation")
                        .WithMany("DimResellers")
                        .HasForeignKey("GeographyKey")
                        .HasConstraintName("FK_DimReseller_DimGeography");

                    b.Navigation("GeographyKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactCallCenter", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "DateKeyNavigation")
                        .WithMany("FactCallCenters")
                        .HasForeignKey("DateKey")
                        .HasConstraintName("FK_FactCallCenter_DimDate")
                        .IsRequired();

                    b.Navigation("DateKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactCurrencyRate", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimCurrency", "CurrencyKeyNavigation")
                        .WithMany("FactCurrencyRates")
                        .HasForeignKey("CurrencyKey")
                        .HasConstraintName("FK_FactCurrencyRate_DimCurrency")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "DateKeyNavigation")
                        .WithMany("FactCurrencyRates")
                        .HasForeignKey("DateKey")
                        .HasConstraintName("FK_FactCurrencyRate_DimDate")
                        .IsRequired();

                    b.Navigation("CurrencyKeyNavigation");

                    b.Navigation("DateKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactFinance", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimAccount", "AccountKeyNavigation")
                        .WithMany()
                        .HasForeignKey("AccountKey")
                        .HasConstraintName("FK_FactFinance_DimAccount")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "DateKeyNavigation")
                        .WithMany()
                        .HasForeignKey("DateKey")
                        .HasConstraintName("FK_FactFinance_DimDate")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimDepartmentGroup", "DepartmentGroupKeyNavigation")
                        .WithMany()
                        .HasForeignKey("DepartmentGroupKey")
                        .HasConstraintName("FK_FactFinance_DimDepartmentGroup")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimOrganization", "OrganizationKeyNavigation")
                        .WithMany()
                        .HasForeignKey("OrganizationKey")
                        .HasConstraintName("FK_FactFinance_DimOrganization")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimScenario", "ScenarioKeyNavigation")
                        .WithMany()
                        .HasForeignKey("ScenarioKey")
                        .HasConstraintName("FK_FactFinance_DimScenario")
                        .IsRequired();

                    b.Navigation("AccountKeyNavigation");

                    b.Navigation("DateKeyNavigation");

                    b.Navigation("DepartmentGroupKeyNavigation");

                    b.Navigation("OrganizationKeyNavigation");

                    b.Navigation("ScenarioKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactInternetSale", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimCurrency", "CurrencyKeyNavigation")
                        .WithMany("FactInternetSales")
                        .HasForeignKey("CurrencyKey")
                        .HasConstraintName("FK_FactInternetSales_DimCurrency")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimCustomer", "CustomerKeyNavigation")
                        .WithMany("FactInternetSales")
                        .HasForeignKey("CustomerKey")
                        .HasConstraintName("FK_FactInternetSales_DimCustomer")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "DueDateKeyNavigation")
                        .WithMany("FactInternetSaleDueDateKeyNavigations")
                        .HasForeignKey("DueDateKey")
                        .HasConstraintName("FK_FactInternetSales_DimDate1")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "OrderDateKeyNavigation")
                        .WithMany("FactInternetSaleOrderDateKeyNavigations")
                        .HasForeignKey("OrderDateKey")
                        .HasConstraintName("FK_FactInternetSales_DimDate")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimProduct", "ProductKeyNavigation")
                        .WithMany("FactInternetSales")
                        .HasForeignKey("ProductKey")
                        .HasConstraintName("FK_FactInternetSales_DimProduct")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimPromotion", "PromotionKeyNavigation")
                        .WithMany("FactInternetSales")
                        .HasForeignKey("PromotionKey")
                        .HasConstraintName("FK_FactInternetSales_DimPromotion")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimSalesTerritory", "SalesTerritoryKeyNavigation")
                        .WithMany("FactInternetSales")
                        .HasForeignKey("SalesTerritoryKey")
                        .HasConstraintName("FK_FactInternetSales_DimSalesTerritory")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "ShipDateKeyNavigation")
                        .WithMany("FactInternetSaleShipDateKeyNavigations")
                        .HasForeignKey("ShipDateKey")
                        .HasConstraintName("FK_FactInternetSales_DimDate2")
                        .IsRequired();

                    b.Navigation("CurrencyKeyNavigation");

                    b.Navigation("CustomerKeyNavigation");

                    b.Navigation("DueDateKeyNavigation");

                    b.Navigation("OrderDateKeyNavigation");

                    b.Navigation("ProductKeyNavigation");

                    b.Navigation("PromotionKeyNavigation");

                    b.Navigation("SalesTerritoryKeyNavigation");

                    b.Navigation("ShipDateKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactInternetSalesReason", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimSalesReason", "SalesReasonKeyNavigation")
                        .WithMany("FactInternetSalesReasons")
                        .HasForeignKey("SalesReasonKey")
                        .HasConstraintName("FK_FactInternetSalesReason_DimSalesReason")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.FactInternetSale", "SalesOrder")
                        .WithMany("FactInternetSalesReasons")
                        .HasForeignKey("SalesOrderNumber", "SalesOrderLineNumber")
                        .HasConstraintName("FK_FactInternetSalesReason_FactInternetSales")
                        .IsRequired();

                    b.Navigation("SalesOrder");

                    b.Navigation("SalesReasonKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactProductInventory", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "DateKeyNavigation")
                        .WithMany("FactProductInventories")
                        .HasForeignKey("DateKey")
                        .HasConstraintName("FK_FactProductInventory_DimDate")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimProduct", "ProductKeyNavigation")
                        .WithMany("FactProductInventories")
                        .HasForeignKey("ProductKey")
                        .HasConstraintName("FK_FactProductInventory_DimProduct")
                        .IsRequired();

                    b.Navigation("DateKeyNavigation");

                    b.Navigation("ProductKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactResellerSale", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimCurrency", "CurrencyKeyNavigation")
                        .WithMany("FactResellerSales")
                        .HasForeignKey("CurrencyKey")
                        .HasConstraintName("FK_FactResellerSales_DimCurrency")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "DueDateKeyNavigation")
                        .WithMany("FactResellerSaleDueDateKeyNavigations")
                        .HasForeignKey("DueDateKey")
                        .HasConstraintName("FK_FactResellerSales_DimDate1")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimEmployee", "EmployeeKeyNavigation")
                        .WithMany("FactResellerSales")
                        .HasForeignKey("EmployeeKey")
                        .HasConstraintName("FK_FactResellerSales_DimEmployee")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "OrderDateKeyNavigation")
                        .WithMany("FactResellerSaleOrderDateKeyNavigations")
                        .HasForeignKey("OrderDateKey")
                        .HasConstraintName("FK_FactResellerSales_DimDate")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimProduct", "ProductKeyNavigation")
                        .WithMany("FactResellerSales")
                        .HasForeignKey("ProductKey")
                        .HasConstraintName("FK_FactResellerSales_DimProduct")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimPromotion", "PromotionKeyNavigation")
                        .WithMany("FactResellerSales")
                        .HasForeignKey("PromotionKey")
                        .HasConstraintName("FK_FactResellerSales_DimPromotion")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimReseller", "ResellerKeyNavigation")
                        .WithMany("FactResellerSales")
                        .HasForeignKey("ResellerKey")
                        .HasConstraintName("FK_FactResellerSales_DimReseller")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimSalesTerritory", "SalesTerritoryKeyNavigation")
                        .WithMany("FactResellerSales")
                        .HasForeignKey("SalesTerritoryKey")
                        .HasConstraintName("FK_FactResellerSales_DimSalesTerritory")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "ShipDateKeyNavigation")
                        .WithMany("FactResellerSaleShipDateKeyNavigations")
                        .HasForeignKey("ShipDateKey")
                        .HasConstraintName("FK_FactResellerSales_DimDate2")
                        .IsRequired();

                    b.Navigation("CurrencyKeyNavigation");

                    b.Navigation("DueDateKeyNavigation");

                    b.Navigation("EmployeeKeyNavigation");

                    b.Navigation("OrderDateKeyNavigation");

                    b.Navigation("ProductKeyNavigation");

                    b.Navigation("PromotionKeyNavigation");

                    b.Navigation("ResellerKeyNavigation");

                    b.Navigation("SalesTerritoryKeyNavigation");

                    b.Navigation("ShipDateKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactSalesQuotum", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "DateKeyNavigation")
                        .WithMany("FactSalesQuota")
                        .HasForeignKey("DateKey")
                        .HasConstraintName("FK_FactSalesQuota_DimDate")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimEmployee", "EmployeeKeyNavigation")
                        .WithMany("FactSalesQuota")
                        .HasForeignKey("EmployeeKey")
                        .HasConstraintName("FK_FactSalesQuota_DimEmployee")
                        .IsRequired();

                    b.Navigation("DateKeyNavigation");

                    b.Navigation("EmployeeKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactSurveyResponse", b =>
                {
                    b.HasOne("AdvantureWork.Model.Entities.DimCustomer", "CustomerKeyNavigation")
                        .WithMany("FactSurveyResponses")
                        .HasForeignKey("CustomerKey")
                        .HasConstraintName("FK_FactSurveyResponse_CustomerKey")
                        .IsRequired();

                    b.HasOne("AdvantureWork.Model.Entities.DimDate", "DateKeyNavigation")
                        .WithMany("FactSurveyResponses")
                        .HasForeignKey("DateKey")
                        .HasConstraintName("FK_FactSurveyResponse_DateKey")
                        .IsRequired();

                    b.Navigation("CustomerKeyNavigation");

                    b.Navigation("DateKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.AppAction", b =>
                {
                    b.Navigation("Function_Action");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.AppFunction", b =>
                {
                    b.Navigation("Function_Action");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.AppFunction_Action", b =>
                {
                    b.Navigation("Role_Permission");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimAccount", b =>
                {
                    b.Navigation("InverseParentAccountKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimCurrency", b =>
                {
                    b.Navigation("DimOrganizations");

                    b.Navigation("FactCurrencyRates");

                    b.Navigation("FactInternetSales");

                    b.Navigation("FactResellerSales");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimCustomer", b =>
                {
                    b.Navigation("FactInternetSales");

                    b.Navigation("FactSurveyResponses");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimDate", b =>
                {
                    b.Navigation("FactCallCenters");

                    b.Navigation("FactCurrencyRates");

                    b.Navigation("FactInternetSaleDueDateKeyNavigations");

                    b.Navigation("FactInternetSaleOrderDateKeyNavigations");

                    b.Navigation("FactInternetSaleShipDateKeyNavigations");

                    b.Navigation("FactProductInventories");

                    b.Navigation("FactResellerSaleDueDateKeyNavigations");

                    b.Navigation("FactResellerSaleOrderDateKeyNavigations");

                    b.Navigation("FactResellerSaleShipDateKeyNavigations");

                    b.Navigation("FactSalesQuota");

                    b.Navigation("FactSurveyResponses");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimDepartmentGroup", b =>
                {
                    b.Navigation("InverseParentDepartmentGroupKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimEmployee", b =>
                {
                    b.Navigation("FactResellerSales");

                    b.Navigation("FactSalesQuota");

                    b.Navigation("InverseParentEmployeeKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimGeography", b =>
                {
                    b.Navigation("DimCustomers");

                    b.Navigation("DimResellers");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimOrganization", b =>
                {
                    b.Navigation("InverseParentOrganizationKeyNavigation");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimProduct", b =>
                {
                    b.Navigation("FactInternetSales");

                    b.Navigation("FactProductInventories");

                    b.Navigation("FactResellerSales");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimProductCategory", b =>
                {
                    b.Navigation("DimProductSubcategories");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimProductSubcategory", b =>
                {
                    b.Navigation("DimProducts");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimPromotion", b =>
                {
                    b.Navigation("FactInternetSales");

                    b.Navigation("FactResellerSales");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimReseller", b =>
                {
                    b.Navigation("FactResellerSales");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimSalesReason", b =>
                {
                    b.Navigation("FactInternetSalesReasons");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.DimSalesTerritory", b =>
                {
                    b.Navigation("DimEmployees");

                    b.Navigation("DimGeographies");

                    b.Navigation("FactInternetSales");

                    b.Navigation("FactResellerSales");
                });

            modelBuilder.Entity("AdvantureWork.Model.Entities.FactInternetSale", b =>
                {
                    b.Navigation("FactInternetSalesReasons");
                });
#pragma warning restore 612, 618
        }
    }
}
